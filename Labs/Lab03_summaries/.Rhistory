read.csv("flippin_coins.csv")
coins <- read.csv("flippin_coins.csv")
coins[,1:]
coins[,1:length(coins)]
coins[,2:length(coins)]
coins <- coins[,2:length(coins)]
coins
data <- read.csv("flippin_coins.csv")
coins <- data[,2:length(data()]
coins <- data[,2:length(data)]
coins
table(coins)
?table
?tabulate
apply(coins, 2, table)
apply(coins, 1, table)
apply(coins, 1, factor, simplify=FALSE)
lapply(apply(coins, 1, factor, simplify=FALSE), table)
lapply(apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE), table)
sapply(apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE), table)
lapply(apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE), table)
sapply(apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE), table)
apply(apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE), 1, table)
apply(apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE), 2, table)
apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE)
apply(
apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE),
1,
table)
factored <- apply(coins, 1, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE)
dim(factored)
lapply(factored, table)
data.frame(lapply(factored, table))
data.frame(sapply(factored, table))
t(factored)
data.frame(sapply(t(factored), table))
sapply(t(factored), table)
lapply(t(factored), table)
sapply(factored, table)
t(sapply(factored, table))
data.frame(t(sapply(factored, table)))
heads_v_tails <- data.frame(t(sapply(factored, table)))
heads_v_tails$heads
hist(heads_v_tails)
hist(heads_v_tails$heads)
factored <- apply(coins, 2, function(row) factor(row, levels=c("heads", "tails")), simplify=FALSE)
heads_v_tails <- data.frame(t(sapply(factored, table)))
heads_v_tails$heads
hist(heads_v_tails$heads)
?apply
unique(coins)
?unique
mat(coins)
matrix(coins)
coins.as_matrix()
as.matrix(coins)
unique(as.matrix(coins))
as.vector(coins)
unique(as.vector(coins))
blah <- as.matrix(coins)
blah.dim <- NULL
blah <- as.vector(as.matrix(coins))
blah
unique(blah)
heads_v_tails <- table_per_row(coins)
# this function tabulates the frequency per row.
# setting MARGIN to 2 gives frequency per column.
table_per_row <- function(data, MARGIN=1) {
factored <- apply(data, MARGIN, function(row) factor(row, levels=unique(as.vector(as.matrix(data)))), simplify=FALSE)
tabulated <- data.frame(t(sapply(factored, table)))
return(tabulated)
}
heads_v_tails <- table_per_row(coins)
heads_v_tails
heads_v_tails$heads/10
hist(heads_v_tails$heads/10)
hist(heads_v_tails_per_student$heads/nrow(coins))
heads_v_tails_per_student <- table_per_row(coins)
hist(heads_v_tails_per_student$heads/nrow(coins))
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=2)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=3)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=3)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=2)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=4)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=5)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=6)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=7)
hist(heads_v_tails_per_student$heads/nrow(coins), breaks=6)
proportions <- heads_v_tails_per_student$heads/nrow(coins)
hist(proportions, breaks=seq(0,1,lenght.out=2))
hist(proportions, breaks=seq(0,1,length.out=2))
hist(proportions, breaks=seq(0,1,length.out=3))
hist(proportions, breaks=seq(0,1,length.out=4))
hist(proportions, breaks=seq(0,1,length.out=5))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=5))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=4))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=3))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=2))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=1))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=4))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=5))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=6))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=7))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=8))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=9))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=10))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=11))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=12))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=13))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=14))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=12))
hist(proportions, breaks=seq(min(proportions),max(proportions),length.out=11))
View(data)
View(data)
# this function tabulates the frequency per row.
# setting MARGIN to 2 gives frequency per column.
table_per_row <- function(data, MARGIN=1) {
flat_data <- as.vector(as.matrix(data)) # "flatten" the data into just a list of heads and tails
unique_values <- unique(flat_data) # get all of the unique values in the data
factored <- apply(data, MARGIN, function(row) factor(row, levels=unique_values, simplify=FALSE)) # maps the "factor" function over the rows... this is just a precursor to make "table" work right
tabulated <- sapply(factored, table) # map "table" over the previous line
return(data.frame(t(tabulated))) # return as a dataframe in familiar orientation.
}
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
View(heads_v_tails_per_student)
?write.csv
heads_v_tails_per_student$heads < 5
sum(heads_v_tails_per_student$heads < 5)
TRUE + TRUE
FALSE + TRUE
3 < heads_v_tails_per_student$heads < 5
3 < heads_v_tails_per_student AND heads_v_tails_per_student$heads < 5
(3 < heads_v_tails_per_student) & (heads_v_tails_per_student$heads < 5)
(3 < heads_v_tails_per_student$heads) & (heads_v_tails_per_student$heads < 5)
sum((3 < heads_v_tails_per_student$heads) & (heads_v_tails_per_student$heads < 5))
heads_v_tails_per_student$heads < 7
sum(heads_v_tails_per_student$heads < 7)
sum(heads_v_tails_per_student$heads < 7) / nrows(heads_v_tails_per_student)
sum(heads_v_tails_per_student$heads < 7) / nrow(heads_v_tails_per_student)
hist(heads_v_tails_per_student$heads)
?hist
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 8.5, 9)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, 9)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 8.5, length.out=9)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=9)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=10)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=11)) # make 9 evenly spaced breaks from -0.5 to 8.5
seq(-0.5, 9.5, length.out=11)
cuts = seq(-0.5, 9.5, length.out=11) # make 11 evenly spaced "breaks" from -0.5 to 9.5 (inclusive).  Note that this makes 10 "bins"!
hist(heads_v_tails_per_student$heads, breaks = cuts)
hist(heads_v_tails_per_student$heads, breaks = 12)
hist(heads_v_tails_per_student$heads, breaks = 13)
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=3)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=4)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=5)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=6)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=7)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=14)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=119)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=1)) # make 9 evenly spaced breaks from -0.5 to 8.5
cars$speed
cars$dist
swiss$Education
swiss$Fertility
hist(swiss$Fertility, breaks=12)
hist(swiss$Fertility, breaks=19)
hist(swiss$Fertility, breaks=100)
hist(swiss$Fertility, breaks=120)
hist(swiss$Fertility, breaks=2)
hist(swiss$Fertility, breaks=1)
hist(swiss$Fertility, breaks=2)
hist(swiss$Fertility, breaks=3)
hist(swiss$Fertility, breaks=4)
hist(swiss$Fertility, breaks=5)
hist(swiss$Fertility, breaks=6)
hist(swiss$Fertility, breaks=7)
hist(swiss$Fertility, breaks=8)
hist(swiss$Fertility, breaks=9)
hist(swiss$Fertility, breaks=10)
hist(swiss$Fertility, breaks=11)
hist(swiss$Fertility, breaks=12)
hist(swiss$Fertility, breaks=13)
hist(swiss$Fertility, breaks=14)
hist(swiss$Fertility, breaks=15)
hist(swiss$Fertility, breaks=16)
hist(swiss$Fertility, breaks=17)
hist(swiss$Fertility, breaks=25)
hist(swiss$Fertility, breaks=50)
hist(swiss$Fertility, breaks=25)
hist(swiss$Fertility, breaks=50)
hist(swiss$Fertility, breaks=100)
# this function tabulates the frequency per row.
# setting MARGIN to 2 gives frequency per column.
table_per_row <- function(data, MARGIN=1) {
flat_data <- as.vector(as.matrix(data)) # "flatten" the data into just a list of heads and tails
unique_values <- unique(flat_data) # get all of the unique values in the data
factored <- apply(data, MARGIN, function(row) factor(row, levels=unique_values), simplify=FALSE) # maps the "factor" function over the rows... this is just a precursor to make "table" work right
tabulated <- sapply(factored, table) # map "table" over the previous line
return(data.frame(t(tabulated))) # return as a dataframe in familiar orientation.
}
data <- read.csv("flippin_coins.csv")
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- read.csv("flippin_coins.csv")
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- read.csv("flippin_coins.csv")
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data <- data[, 2:ncol(data)]
data
class(data)
mean(heads_v_tails_per_student$heads)
sd(heads_v_tails_per_student$heads)
sum((heads_v_tails_per_student > )heads_v_tails_per_student$heads < 7) / nrow(heads_v_tails_per_student)
std <- sd(heads_v_tails_per_student$heads)
m <- mean(heads_v_tails_per_student$heads)
sum((heads_v_tails_per_student > m-std) & (heads_v_tails_per_student$heads < m+std)) / nrow(heads_v_tails_per_student)
sum((heads_v_tails_per_student$heads > m-std) & (heads_v_tails_per_student$heads < m+std)) / nrow(heads_v_tails_per_student)
sum((heads_v_tails_per_student$heads > m-2.5*std) & (heads_v_tails_per_student$heads < m+2.5*std)) / nrow(heads_v_tails_per_student)
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=3)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=4)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=5)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=6)) # make 9 evenly spaced breaks from -0.5 to 8.5
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=7)) # make 9 evenly spaced breaks from -0.5 to 8.5
8
hist(heads_v_tails_per_student$heads, breaks = seq(-0.5, 9.5, length.out=8)) # make 9 evenly spaced breaks from -0.5 to 8.5
